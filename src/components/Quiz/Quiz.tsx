import { useState } from "react";

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
}

const quizData: Question[] = [
  {
    id: 1,
    question:
      'H·ªì Ch√≠ Minh nh·∫•n m·∫°nh: "ƒêo√†n k·∫øt l√† s·ª©c m·∫°nh, ƒëo√†n k·∫øt l√† th·∫Øng l·ª£i." C√¢u n√≥i n√†y th·ªÉ hi·ªán ƒëi·ªÅu g√¨ v·ªÅ vai tr√≤ c·ªßa ƒë·∫°i ƒëo√†n k·∫øt trong c√°ch m·∫°ng?',
    options: [
      "L√† nhi·ªám v·ª• nh·∫•t th·ªùi",
      "L√† m·ª•c ti√™u v√† nhi·ªám v·ª• h√†ng ƒë·∫ßu",
      "Ch·ªâ c·∫ßn trong giai ƒëo·∫°n kh√°ng chi·∫øn",
      "Ch·ªâ l√† kh·∫©u hi·ªáu ch√≠nh tr·ªã",
    ],
    correctAnswer: 1,
  },
  {
    id: 2,
    question:
      "V√¨ sao c√°c phong tr√†o C·∫ßn V∆∞∆°ng, ƒê√¥ng Du, ƒê√¥ng Kinh Nghƒ©a Th·ª•c‚Ä¶ cu·ªëi th·∫ø k·ª∑ XIX th·∫•t b·∫°i?",
    options: [
      "Do thi·∫øu s·ª± l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng",
      "Do ch∆∞a t·∫≠p h·ª£p ƒë∆∞·ª£c s·ª©c m·∫°nh to√†n d√¢n",
      "Do l·ª±c l∆∞·ª£ng v≈© trang y·∫øu",
      "Do kh√¥ng c√≥ s·ª± ·ªßng h·ªô qu·ªëc t·∫ø",
    ],
    correctAnswer: 1,
  },
  {
    id: 3,
    question:
      "Th·∫Øng l·ª£i n√†o ch·ª©ng minh r√µ r√†ng nh·∫•t s·ª©c m·∫°nh ƒë·∫°i ƒëo√†n k·∫øt to√†n d√¢n t·ªôc?",
    options: [
      "Kh·ªüi nghƒ©a Y√™n Th·∫ø",
      "C√°ch m·∫°ng Th√°ng T√°m 1945",
      "Chi·∫øn th·∫Øng ƒêi·ªán Bi√™n Ph·ªß 1954",
      "C√¥ng cu·ªôc ƒê·ªïi m·ªõi 1986",
    ],
    correctAnswer: 1,
  },
  {
    id: 4,
    question:
      "Theo H·ªì Ch√≠ Minh, l·ª±c l∆∞·ª£ng n√≤ng c·ªët v·ªØng ch·∫Øc trong kh·ªëi ƒë·∫°i ƒëo√†n k·∫øt l√†:",
    options: [
      "C√¥ng ‚Äì th∆∞∆°ng ‚Äì binh",
      "C√¥ng ‚Äì n√¥ng ‚Äì tr√≠ th·ª©c",
      "N√¥ng d√¢n ‚Äì tr√≠ th·ª©c ‚Äì ph·ª• n·ªØ",
      "C√¥ng ‚Äì n√¥ng ‚Äì qu√¢n ƒë·ªôi",
    ],
    correctAnswer: 1,
  },
  {
    id: 5,
    question:
      "Trong kh√°ng chi·∫øn ch·ªëng M·ªπ, y·∫øu t·ªë n√†o th·ªÉ hi·ªán ƒëo√†n k·∫øt qu·ªëc t·∫ø?",
    options: [
      "S·ª± tham gia c·ªßa tr√≠ th·ª©c mi·ªÅn Nam",
      "S·ª± ·ªßng h·ªô t·ª´ phong tr√†o ph·∫£n chi·∫øn v√† b·∫°n b√® qu·ªëc t·∫ø",
      "Vai tr√≤ l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng",
      "Li√™n minh c√¥ng ‚Äì n√¥ng ‚Äì tr√≠ th·ª©c",
    ],
    correctAnswer: 1,
  },
  {
    id: 6,
    question:
      "M·ªôt trong nh·ªØng ƒëi·ªÅu ki·ªán quan tr·ªçng ƒë·ªÉ x√¢y d·ª±ng kh·ªëi ƒë·∫°i ƒëo√†n k·∫øt to√†n d√¢n t·ªôc l√†:",
    options: [
      "Ch·ªâ b·∫£o v·ªá l·ª£i √≠ch c·ªßa giai c·∫•p c√¥ng nh√¢n",
      "L·∫•y l·ª£i √≠ch t·ªëi cao c·ªßa d√¢n t·ªôc v√† l·ª£i √≠ch cƒÉn b·∫£n c·ªßa nh√¢n d√¢n l√†m m·ª•c ti√™u",
      "∆Øu ti√™n l·ª£i √≠ch qu·ªëc t·∫ø h∆°n l·ª£i √≠ch d√¢n t·ªôc",
      "T√°ch bi·ªát l·ª£i √≠ch giai c·∫•p v√† l·ª£i √≠ch d√¢n t·ªôc",
    ],
    correctAnswer: 1,
  },
  {
    id: 7,
    question:
      'C√¢u n√≥i: "NƒÉm ng√≥n tay c√≥ ng√≥n d√†i ng√≥n ng·∫Øn‚Ä¶ nh∆∞ng ƒë·ªÅu thu·ªôc v·ªÅ m·ªôt b√†n tay" th·ªÉ hi·ªán ph·∫©m ch·∫•t n√†o c·∫ßn c√≥ ƒë·ªÉ x√¢y d·ª±ng ƒë·∫°i ƒëo√†n k·∫øt?',
    options: [
      "L√≤ng trung th√†nh",
      "Tinh th·∫ßn hy sinh",
      "L√≤ng khoan dung, ƒë·ªô l∆∞·ª£ng",
      "√ù ch√≠ ki√™n c∆∞·ªùng",
    ],
    correctAnswer: 2,
  },
  {
    id: 8,
    question: "M·∫∑t tr·∫≠n d√¢n t·ªôc th·ªëng nh·∫•t l√† g√¨?",
    options: [
      "T·ªï ch·ª©c qu√¢n s·ª± do ƒê·∫£ng l√£nh ƒë·∫°o",
      "N∆°i quy t·ª• m·ªçi t·ªï ch·ª©c, c√° nh√¢n y√™u n∆∞·ªõc trong v√† ngo√†i n∆∞·ªõc",
      "Li√™n minh ch√≠nh tr·ªã ng·∫Øn h·∫°n",
      "T·ªï ch·ª©c c·ªßa ri√™ng c√¥ng nh√¢n v√† n√¥ng d√¢n",
    ],
    correctAnswer: 1,
  },
  {
    id: 9,
    question: "Nguy√™n t·∫Øc ho·∫°t ƒë·ªông c·ªßa M·∫∑t tr·∫≠n d√¢n t·ªôc th·ªëng nh·∫•t l√† g√¨?",
    options: [
      "Hi·ªáp th∆∞∆°ng d√¢n ch·ªß, ƒë·∫∑t l·ª£i √≠ch d√¢n t·ªôc l√™n tr√™n h·∫øt",
      "ƒê·∫£ng quy·∫øt ƒë·ªãnh t·∫•t c·∫£, kh√¥ng c·∫ßn b√†n b·∫°c",
      "ƒêo√†n k·∫øt t·∫°m th·ªùi ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u ng·∫Øn h·∫°n",
      "M·ªói th√†nh vi√™n ho·∫°t ƒë·ªông ri√™ng r·∫Ω",
    ],
    correctAnswer: 0,
  },
  {
    id: 10,
    question:
      'H·ªì Ch√≠ Minh kh·∫≥ng ƒë·ªãnh: "D√¢n v·∫≠n kh√©o th√¨ vi·ªác g√¨ c≈©ng th√†nh c√¥ng." C√¢u n√≥i n√†y nh·∫•n m·∫°nh ph∆∞∆°ng th·ª©c n√†o trong x√¢y d·ª±ng kh·ªëi ƒë·∫°i ƒëo√†n k·∫øt?',
    options: [
      "C√¥ng t√°c d√¢n v·∫≠n",
      "Ph√°t tri·ªÉn kinh t·∫ø",
      "C·∫£i c√°ch gi√°o d·ª•c",
      "ƒêo√†n k·∫øt qu·ªëc t·∫ø",
    ],
    correctAnswer: 0,
  },
];

// Function to shuffle array
const shuffleArray = <T,>(array: T[]): T[] => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

export default function Quiz() {
  const [shuffledQuestions, setShuffledQuestions] = useState<Question[]>(() => shuffleArray(quizData));
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>(
    new Array(quizData.length).fill(-1)
  );
  const [showResults, setShowResults] = useState(false);
  const [selectedOption, setSelectedOption] = useState(-1);

  const handleAnswerSelect = (optionIndex: number) => {
    setSelectedOption(optionIndex);
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = optionIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNext = () => {
    if (currentQuestion < shuffledQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedOption(selectedAnswers[currentQuestion + 1]);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedOption(selectedAnswers[currentQuestion - 1]);
    }
  };

  const calculateScore = () => {
    return selectedAnswers.reduce((score, answer, index) => {
      return score + (answer === shuffledQuestions[index].correctAnswer ? 1 : 0);
    }, 0);
  };

  const resetQuiz = () => {
    setShuffledQuestions(shuffleArray(quizData));
    setCurrentQuestion(0);
    setSelectedAnswers(new Array(quizData.length).fill(-1));
    setShowResults(false);
    setSelectedOption(-1);
  };

  const progress = ((currentQuestion + 1) / shuffledQuestions.length) * 100;

  if (showResults) {
    const score = calculateScore();
    const percentage = (score / shuffledQuestions.length) * 100;

    return (
      <div 
        className="min-h-screen relative p-6 pt-20"
        style={{
          backgroundImage: 'url("/imgs/Quiz ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc.jpg")',
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          backgroundRepeat: 'no-repeat',
          zIndex: 1
        }}
      >
        {/* Background overlay */}
        <div 
          className="absolute inset-0"
          style={{
            background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 58, 138, 0.85) 50%, rgba(15, 23, 42, 0.9) 100%)',
            zIndex: 2
          }}
        ></div>
        <div className="max-w-4xl mx-auto relative z-40">
          {/* Header Results */}
          <div className="bg-black/80 rounded-3xl shadow-2xl p-8 mb-6">
            <div className="flex items-center justify-between text-white mb-6">
              <div className="flex items-center gap-3">
                <svg
                  className="w-8 h-8 text-red-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
                <h1 className="text-3xl font-bold">K·∫øt qu·∫£ Quiz</h1>
              </div>
              <button
                onClick={resetQuiz}
                className="bg-gradient-to-r from-red-600 to-yellow-600 hover:from-red-700 hover:to-yellow-700 text-white font-semibold py-2 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
              >
                L√†m l·∫°i Quiz
              </button>
            </div>

            <div className="text-center">
                <div className="text-6xl font-bold text-white mb-2">
                  {score}/{shuffledQuestions.length}
                </div>
                <p className="text-xl text-gray-300 mb-4">
                  B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {score} tr√™n {shuffledQuestions.length} c√¢u h·ªèi
                </p>

              <div className="mb-6">
                {percentage >= 80 ? (
                  <div className="text-green-400">
                    <p className="text-lg font-semibold">Xu·∫•t s·∫Øc! üéâ</p>
                    <p>
                      B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c v·ªÅ ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc trong t∆∞
                      t∆∞·ªüng H·ªì Ch√≠ Minh.
                    </p>
                  </div>
                ) : percentage >= 60 ? (
                  <div className="text-blue-400">
                    <p className="text-lg font-semibold">Kh√° t·ªët! üëç</p>
                    <p>
                      B·∫°n c√≥ hi·ªÉu bi·∫øt c∆° b·∫£n, h√£y ti·∫øp t·ª•c h·ªçc t·∫≠p ƒë·ªÉ n√¢ng cao
                      ki·∫øn th·ª©c.
                    </p>
                  </div>
                ) : (
                  <div className="text-orange-400">
                    <p className="text-lg font-semibold">
                      C·∫ßn c·ªë g·∫Øng th√™m! üí™
                    </p>
                    <p>H√£y √¥n t·∫≠p l·∫°i c√°c n·ªôi dung v·ªÅ ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc.</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Detailed Results */}
          <div className="space-y-4">
            {shuffledQuestions.map((question, index) => {
              const userAnswer = selectedAnswers[index];
              const isCorrect = userAnswer === question.correctAnswer;

              return (
                <div
                  key={question.id}
                  className="bg-black/80 rounded-2xl border-2 border-gray-700 p-6"
                >
                  {/* Question */}
                  <h3 className="text-white font-semibold mb-4 leading-relaxed">
                    {question.question}
                  </h3>

                  {/* User's Answer */}
                  {userAnswer !== -1 && (
                    <div
                      className={`flex items-start gap-3 p-4 rounded-xl border-2 mb-3 ${
                        isCorrect
                          ? "border-green-500 bg-green-500/10"
                          : "border-red-500 bg-red-500/10"
                      }`}
                    >
                      <div
                        className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center ${
                          isCorrect ? "bg-green-500" : "bg-red-500"
                        }`}
                      >
                        {isCorrect ? (
                          <svg
                            className="w-4 h-4 text-white"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M5 13l4 4L19 7"
                            />
                          </svg>
                        ) : (
                          <svg
                            className="w-4 h-4 text-white"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M6 18L18 6M6 6l12 12"
                            />
                          </svg>
                        )}
                      </div>
                      <div className="flex-1">
                        <p
                          className={`font-medium ${
                            isCorrect ? "text-green-400" : "text-red-400"
                          }`}
                        >
                          {isCorrect ? "ƒê√°p √°n ƒë√∫ng: " : "ƒê√°p √°n sai: "}
                          {question.options[userAnswer]}
                        </p>
                      </div>
                    </div>
                  )}

                  {/* Correct Answer (if user was wrong) */}
                  {!isCorrect && (
                    <div className="flex items-start gap-3 p-4 rounded-xl border-2 border-green-500 bg-green-500/10">
                      <div className="flex-shrink-0 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center">
                        <svg
                          className="w-4 h-4 text-white"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M5 13l4 4L19 7"
                          />
                        </svg>
                      </div>
                      <div className="flex-1">
                        <p className="text-green-400 font-medium">
                          ƒê√°p √°n ƒë√∫ng:{" "}
                          {question.options[question.correctAnswer]}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen relative flex items-center justify-center p-6 pt-20"
      style={{
        backgroundImage: 'url("/imgs/Quiz ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc.jpg")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        zIndex: 1
      }}
    >
      {/* Background overlay */}
      <div 
        className="absolute inset-0"
        style={{
          background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 58, 138, 0.85) 50%, rgba(15, 23, 42, 0.9) 100%)',
          zIndex: 2
        }}
      ></div>
      <div className="max-w-4xl w-full relative z-40">
        <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
          {/* Header with Progress */}
          <div className="bg-gradient-to-r from-red-600 to-yellow-600 p-6">
            <div className="flex items-center justify-between text-white mb-4">
              <h1 className="text-2xl font-bold">Quiz: ƒê·∫°i ƒêo√†n K·∫øt D√¢n T·ªôc</h1>
              <span className="text-lg font-semibold">
                {currentQuestion + 1}/{shuffledQuestions.length}
              </span>
            </div>

            {/* Progress Bar */}
            <div className="w-full bg-white/20 rounded-full h-3">
              <div
                className="bg-white h-3 rounded-full transition-all duration-500 ease-out"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
          </div>

          {/* Question Content */}
          <div className="p-8">
            <div className="mb-8">
              <h2 className="text-xl font-semibold text-gray-800 leading-relaxed">
                {shuffledQuestions[currentQuestion].question}
              </h2>
            </div>

            {/* Options */}
            <div className="space-y-4 mb-8">
              {shuffledQuestions[currentQuestion].options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerSelect(index)}
                  className={`w-full p-4 text-left rounded-xl border-2 transition-all duration-300 transform hover:scale-[1.02] ${
                    selectedOption === index
                      ? "border-red-500 bg-red-50 text-red-700 shadow-lg"
                      : "border-gray-200 hover:border-red-300 hover:bg-gray-50"
                  }`}
                >
                  <div className="flex items-center">
                    <span
                      className={`w-8 h-8 rounded-full border-2 flex items-center justify-center mr-4 text-sm font-semibold ${
                        selectedOption === index
                          ? "border-red-500 bg-red-500 text-white"
                          : "border-gray-300"
                      }`}
                    >
                      {String.fromCharCode(97 + index)}
                    </span>
                    <span className="text-gray-700">{option}</span>
                  </div>
                </button>
              ))}
            </div>

            {/* Navigation Buttons */}
            <div className="flex justify-between">
              <button
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
                className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  currentQuestion === 0
                    ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                    : "bg-gray-600 text-white hover:bg-gray-700 transform hover:scale-105"
                }`}
              >
                ‚Üê C√¢u tr∆∞·ªõc
              </button>

              <button
                onClick={handleNext}
                disabled={selectedOption === -1}
                className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  selectedOption === -1
                    ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                    : "bg-gradient-to-r from-red-600 to-yellow-600 text-white hover:from-red-700 hover:to-yellow-700 transform hover:scale-105 shadow-lg"
                }`}
              >
                {currentQuestion === shuffledQuestions.length - 1
                  ? "Ho√†n th√†nh"
                  : "C√¢u ti·∫øp ‚Üí"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
